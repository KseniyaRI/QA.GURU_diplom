name: Playwright tests working web-service
on:
  push:
    branches: [ test-branch ]  # Запускать при push в ветку test-branch
  pull_request:
    branches: [ main ]         # Запускать при pull request в ветку main
  workflow_dispatch:           # Разрешить ручной запуск из интерфейса GitHub
permissions:
  contents: write              # Разрешение на запись содержимого репозитория
  pages: write                 # Разрешение на публикацию GitHub Pages
  packages: write              # Разрешение на публикацию пакетов
jobs:
  testE2E:
    timeout-minutes: 30        # Ограничение времени выполнения задачи
    runs-on: [ self-hosted, ARM64 ]  # Запускать на self-hosted раннере с ARM64 архитектурой
    env:
      # Подключение всех необходимых секретов из GitHub Secrets для тестов
      BASE_URL: ${{ secrets.BASE_URL }}
      KEYCLOAK_URL: ${{ secrets.KEYCLOAK_URL }}
      CLIENT_CODE: ${{ secrets.CLIENT_CODE }}
      USERNAME: ${{ secrets.USERNAME }}
      PASSWORD: ${{ secrets.PASSWORD }}
      ALLURE_TESTOPS_TOKEN: ${{ secrets.ALLURE_TESTOPS_TOKEN }}  # Токен для Allure TestOps
    steps:
      - uses: actions/checkout@v4  # Шаг 1: Клонирование репозитория
      
      - name: Grant Docker socket permissions  # Шаг 2: Предоставление прав для Docker
        run: sudo chmod 666 /var/run/docker.sock
        
      - name: Set up JDK 11  # Шаг 3: Установка Java - необходима для Allure
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'  # Выбор дистрибутива Java (Eclipse Temurin)
          java-version: '11'       # Версия Java
          
      - uses: actions/setup-node@v4  # Шаг 4: Установка Node.js
        with:
          node-version: lts/*  # Использование последней LTS версии Node.js
          
      - uses: actions/cache@v3  # Шаг 5: Кэширование npm-зависимостей для ускорения
        with:
          path: ~/.npm
          key: ${{ runner.os }}-npm-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-npm-
            
      - name: Install dependencies  # Шаг 6: Установка зависимостей проекта
        run: npm ci
        
      - name: Install Playwright Browsers  # Шаг 7: Установка браузеров для Playwright
        run: npx playwright install --with-deps
        
      - name: Run Playwright tests  # Шаг 8: Запуск тестов с репортерами
        run: npx playwright test specs/ --reporter=list --reporter=junit --reporter=allure-playwright
        
      - name: Upload Playwright test results  # Шаг 9: Загрузка результатов тестов как артефакт
        uses: actions/upload-artifact@v4
        if: always()  # Выполнять даже при ошибках в предыдущих шагах
        continue-on-error: true  # Продолжать выполнение даже при ошибке на этом шаге
        with:
          name: test-results
          path: test-results/trace/  # Путь к результатам тестов
          retention-days: 30  # Хранить артефакты 30 дней
          
      - name: Upload Allure results  # Шаг 10: Загрузка Allure-результатов как артефакт
        uses: actions/upload-artifact@v4
        if: always()
        continue-on-error: true
        with:
          name: allure-results
          path: allure-results  # Путь к Allure-результатам
          retention-days: 30
          
      - name: Upload results to Allure TestOps
        if: always()
        continue-on-error: true
        run: |
          # Установка Allure CLI с параметром --force для предотвращения ошибок
          npm install -g allure-commandline@2.x --force
          # Отправка результатов в Allure TestOps через API
          allure testops upload \
            --endpoint ${{ secrets.ALLURE_TESTOPS_ENDPOINT }} \
            --project-id ${{ secrets.ALLURE_TESTOPS_PROJECT_ID }} \
            --token ${{ secrets.ALLURE_TESTOPS_TOKEN }} \
            allure-results
      
      - name: Generate Allure Report  # Шаг 12: Генерация HTML-отчета Allure
        if: always()
        run: |
          npm install -g allure-commandline@2.x --force
          allure generate allure-results --clean -o allure-report  # Создание HTML-отчета
          
      - name: Send Telegram Notifications
        if: always()
        continue-on-error: true
        run: |
          # Создаем необходимые директории и шаблон, если их нет
          mkdir -p notifications/templates
          # Создаем commons.ftl
          cat > notifications/templates/commons.ftl << 'EOL'
          <#macro formatTime time><#if time??>${time}</#if></#macro>
          EOL
          
          # Создаем telegram.ftl шаблон
          cat > notifications/templates/telegram.ftl << 'EOL'
          <#import "commons.ftl" as commons>
          {
            "message": "<b>${report.name}</b>\n\n<b>Environment:</b> ${report.environment}\n<b>Comment:</b> ${report.comment}\n<b>Duration:</b> ${report.time.duration}\n",
            "parse_mode": "HTML"
          }
          EOL
          
          # Запускаем отправку уведомлений
          java "-DconfigFile=notifications/telegram.json" \
            "-Dbase.reportLink=https://kseniayari.github.io/QA.GURU_diplom/" \
            -jar notifications/allure-notifications-4.9.0.jar
        env:
          TELEGRAM_TOKEN: ${{ secrets.TELEGRAM_TOKEN }}
          TELEGRAM_CHAT: ${{ secrets.TELEGRAM_CHAT }}
          
      - name: Upload Allure HTML report  # Шаг 14: Загрузка HTML-отчета как артефакт
        uses: actions/upload-artifact@v4
        if: always()
        continue-on-error: true
        with:
          name: allure-report
          path: allure-report  # Путь к сгенерированному отчету
          retention-days: 30
          
      - name: Deploy report to GitHub Pages  # Шаг 15: Публикация отчета на GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        if: always()
        continue-on-error: true
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}  # Токен для доступа к GitHub API
          publish_branch: gh-pages  # Ветка для публикации Pages
          publish_dir: ./allure-report  # Директория с отчетом для публикации
          
      - name: Output TestOps URL  # Шаг 16: Просто выводим ссылку на Allure TestOps
        if: always()
        continue-on-error: true
        run: |
          echo "Allure TestOps project: ${{ secrets.ALLURE_TESTOPS_URL }}/project/${{ secrets.ALLURE_TESTOPS_PROJECT_ID }}"