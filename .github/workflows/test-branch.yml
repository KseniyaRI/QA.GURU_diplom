# название workflow
name: Playwright tests working web-service

on:
# стандартный запуск 
  push:
    branches: [ test-branch ]
  pull_request:
    branches: [ main ]
# ручной запуск
  workflow_dispatch:

permissions:
  contents: write
  pages:   write

jobs:
  testE2E:
    runs-on: [ self-hosted, ARM64 ]
    env:
      BASE_URL: ${{ secrets.BASE_URL }}
    steps:
    # 1) Чекаутим репозиторий
    - uses: actions/checkout@v4

    # 2) Даем права на Docker-сокет
    - name: Grant permissions to Docker socket
      run: sudo chmod 666 /var/run/docker.sock

    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v2
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Build self-hosted runner image with registry cache
      uses: docker/build-push-action@v3
      with:
        context:    .runner
        file:       .runner/Dockerfile
        push:       false
        tags:       ghcr.io/kseniyari/self-hosted-runner:cache
        cache-from: type=registry,ref=ghcr.io/kseniyari/self-hosted-runner:cache
        cache-to:   type=registry,ref=ghcr.io/kseniyari/self-hosted-runner:cache,mode=max


      # Устанавливаем Node.js
    - uses: actions/setup-node@v4
      with:
        node-version: lts/*
      
      # Устанавливаем зависимости
    - name: Install dependencies
      run: npm ci

    - name: Install Playwright Browsers
      run: npx playwright install --with-deps
      
      # Запускаем тесты
    - name: Run Playwright tests
      run: npx playwright test --reporter=list,allure-playwright

      # Сохраняем отчет Playwright
    - uses: actions/upload-artifact@v4
      if: always()
      continue-on-error: true
      with:
        name: test-results/output
        path: test-results/output
        retention-days: 30

      # Сохраняем отчет Allure
    - uses: actions/upload-artifact@v4
      if: always()
      continue-on-error: true
      with:
        name: allure-results
        path: allure-results
        retention-days: 30

      # Забираем результаты предыдущего запуска
    - uses: actions/checkout@v4
      if: always()
      continue-on-error: true
      with:
        ref: gh-pages
        path: gh-pages

      # Создаем Allure отчёт
    - name: Generate Allure Report
      if: always()
      run: |
        npm install -g allure-commandline@2.x
        allure generate test-results/allure-results --clean -o allure-report

    - name: Upload Allure HTML report
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: allure-report
        path: allure-report

      # Деплоим отчет
    - name: Deploy report
      if: always()
      uses: peaceiris/actions-gh-pages@v4
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_branch: gh-pages
        publish_dir: ./allure-report