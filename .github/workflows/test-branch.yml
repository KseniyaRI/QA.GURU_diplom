# название workflow
name: Playwright tests working web-service

on:
# стандартный запуск 
  push:
    branches: [ test-branch ]
  pull_request:
    branches: [ main ]
# ручной запуск
  workflow_dispatch:

permissions:
  contents: write
  pages:   write

jobs:
  testE2E:
    runs-on: ubuntu-latest
    env:
      HOST: 0.0.0.0
    steps:
      # Получаем код
    - uses: actions/checkout@v4

      # Устанавливаем Node.js
    - uses: actions/setup-node@v4
      with:
        node-version: lts/*

      # Сборка прод-версии Angular
    - run: npm run build -- --configuration=production

      # Поднимаем локальный веб-сервер (HTTP, но на 0.0.0.0)
    - name: Serve dist on 4200
      run: |
        npx http-server ./dist/<project-name> -a 0.0.0.0 -p 4200 &        
        echo $! > web.pid

      # Ставим и запускаем ngrok ➜ HTTPS-туннель
    - name: Start ngrok tunnel
      env:
        NGROK_TOKEN: ${{ secrets.NGROK_TOKEN }}   # ⚠️ Добавьте в Secrets!
      run: |
        curl -s https://ngrok-agent.s3.amazonaws.com/ngrok.asc | \
          sudo tee /etc/apt/trusted.gpg.d/ngrok.asc >/dev/null
        echo "deb https://ngrok-agent.s3.amazonaws.com stable main" | \
          sudo tee /etc/apt/sources.list.d/ngrok.list
        sudo apt update -qq && sudo apt install -y ngrok
        ngrok config add-authtoken "$NGROK_TOKEN"
        # --host-header=rewrite чинит «Invalid Host header»
        ngrok http --log=stdout --host-header=rewrite 4200 > ngrok.log &
        echo $! > ngrok.pid

      # Ждём, пока ngrok отдаст public_url и кладём его в переменную
    - name: Extract ngrok HTTPS URL
      id: get-url
      run: |
        sudo apt-get -y install jq

      # ждём, пока появится HTTPS-туннель
      until curl -s http://127.0.0.1:4040/api/tunnels \
            | jq -e '.tunnels[] | select(.proto=="https") | .public_url' >/dev/null; do
        sleep 2
      done

      # сохраняем публичный URL в переменную
      NGROK_URL=$(curl -s http://127.0.0.1:4040/api/tunnels \
              | jq -r '.tunnels[] | select(.proto=="https") | .public_url')

      echo "url=$NGROK_URL" >> $GITHUB_OUTPUT

      # Запускаем Playwright
    - name: Run Playwright tests against HTTPS
      env:
        BASE_URL: ${{ steps.get-url.outputs.url }}
      run: npx playwright test

      # Сохраняем отчет Playwright
    - uses: actions/upload-artifact@v4
      if: always()
      continue-on-error: true
      with:
        name: test-results
        path: test-results
        retention-days: 30

      # Сохраняем отчет Allure
    - uses: actions/upload-artifact@v4
      if: always()
      continue-on-error: true
      with:
        name: allure-results
        path: allure-results
        retention-days: 30

      # Забираем результаты предыдущего запуска
    - uses: actions/checkout@v4
      if: always()
      continue-on-error: true
      with:
        ref: gh-pages
        path: gh-pages

      # Создаем Allure отчёт
    - uses: simple-elf/allure-report-action@master
      if: always()
      id: allure-report
      with:
        allure_results: allure-results
        gh_pages: gh-pages
        allure_report: allure-report
        allure_history: allure-history
        keep_reports: 30

      # Деплоим отчет
    - name: Deploy report
      if: always()
      uses: peaceiris/actions-gh-pages@v4
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_branch: gh-pages
        publish_dir: ./allure-report
