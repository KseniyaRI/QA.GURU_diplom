name: Playwright tests working web-service
on:
  push:
    branches: [ test-branch ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: write
  pages: write
  packages: write
jobs:
  testE2E:
    timeout-minutes: 30
    runs-on: [ self-hosted, ARM64 ]
    env:
      BASE_URL: ${{ secrets.BASE_URL }}
      KEYCLOAK_URL: ${{ secrets.KEYCLOAK_URL }}
      CLIENT_CODE: ${{ secrets.CLIENT_CODE }}
      USERNAME: ${{ secrets.USERNAME }}
      PASSWORD: ${{ secrets.PASSWORD }}

    steps:
      - uses: actions/checkout@v4
      
      - name: Grant Docker socket permissions
        run: sudo chmod 666 /var/run/docker.sock
        
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '11'
          
      - uses: actions/setup-node@v4
        with:
          node-version: lts/*
          
      - uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-npm-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-npm-
            
      - name: Install dependencies
        run: npm ci
        
      - name: Install Playwright Browsers
        run: npx playwright install --with-deps
        
      - name: Run Playwright tests
        run: |
          npx playwright test specs/ --reporter=list --reporter=junit --reporter=allure-playwright
        
      - name: Upload Playwright test results
        uses: actions/upload-artifact@v4
        if: always()
        continue-on-error: true
        with:
          name: test-results
          path: test-results
          retention-days: 30
          
      - name: Upload Allure results
        uses: actions/upload-artifact@v4
        if: always()
        continue-on-error: true
        with:
          name: allure-results
          path: allure-results
          retention-days: 30
          
      - name: Generate Allure Report
        if: always()
        run: |
          npm install -g allure-commandline@2.x --force
          allure generate allure-results --clean -o allure-report
          
      - name: Download Allure Notifications
        if: always()
        continue-on-error: true
        run: |
          # Создаем директорию для уведомлений
          mkdir -p notifications
          
          # Скачиваем jar-файл для отправки уведомлений
          curl -o notifications/allure-notifications-4.9.0.jar -L https://github.com/qa-guru/allure-notifications/releases/download/4.9.0/allure-notifications-4.9.0.jar
          
          # Создаем файл конфигурации для Telegram
          cat > notifications/telegram.json << 'EOL'
          {
            "base": {
              "project": "QA.GURU_diplom",
              "environment": "Production",
              "comment": "Playwright Test Results",
              "reportLink": "${reportLink}",
              "language": "ru",
              "messenger": "telegram",
              "allureFolder": "allure-report/",
              "enableChart": true
            },
            "telegram": {
              "token": "${TELEGRAM_TOKEN}",
              "chat": "${TELEGRAM_CHAT}",
              "replyTo": ""
            }
          }
          EOL
          
      - name: Create Notification Templates
        if: always()
        continue-on-error: true
        run: |
          # Создаем необходимые директории и шаблоны
          mkdir -p notifications/templates
          
          # Создаем commons.ftl
          cat > notifications/templates/commons.ftl << 'EOL'
          <#macro formatTime time><#if time??>${time}</#if></#macro>
          EOL
          
          # Создаем telegram.ftl с импортом commons.ftl
          cat > notifications/templates/commons.ftl << 'EOL'
          <#import "commons.ftl" as commons>
          {
            "message": "<b>${report.name}</b>\n\n<b>Environment:</b> ${report.environment}\n<b>Comment:</b> ${report.comment}\n<b>Duration:</b> <#if report.time??>${report.time.duration}</#if>\n\n<a href='${report.url}'>Отчет на GitHub Pages</a>",
            "parse_mode": "HTML"
          }
          EOL
          
      - name: Send Telegram Notifications
        if: always()
        continue-on-error: true
        run: |
          # Запускаем отправку уведомлений
          java "-DconfigFile=notifications/commons.json" \
            "-Dbase.reportLink=https://kseniayari.github.io/QA.GURU_diplom/" \
            -jar notifications/allure-notifications-4.9.0.jar
        env:
          TELEGRAM_TOKEN: ${{ secrets.TELEGRAM_TOKEN }}
          TELEGRAM_CHAT: ${{ secrets.TELEGRAM_CHAT }}
          
      - name: Upload Allure HTML report
        uses: actions/upload-artifact@v4
        if: always()
        continue-on-error: true
        with:
          name: allure-report
          path: allure-report
          retention-days: 30
          
      - name: Deploy report to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        if: always()
        continue-on-error: true
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_branch: gh-pages
          publish_dir: ./allure-report