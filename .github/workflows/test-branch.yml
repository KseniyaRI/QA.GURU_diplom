name: Playwright tests working web-service
on:
  push:
    branches: [ test-branch ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      ALLURE_JOB_RUN_ID:
        description: 'ALLURE_JOB_RUN_ID service parameter. Leave blank.'
        required: false
      ALLURE_USERNAME:
        description: 'ALLURE_USERNAME service parameter. Leave blank.'
        required: false
permissions:
  contents: write
  pages: write
  packages: write
jobs:
  testE2E:
    timeout-minutes: 30
    runs-on: [ self-hosted, ARM64 ]
    env:
      BASE_URL: ${{ secrets.BASE_URL }}
      KEYCLOAK_URL: ${{ secrets.KEYCLOAK_URL }}
      CLIENT_CODE: ${{ secrets.CLIENT_CODE }}
      USERNAME: ${{ secrets.USERNAME }}
      PASSWORD: ${{ secrets.PASSWORD }}
      ALLURE_TOKEN: ${{ secrets.ALLURE_TESTOPS_TOKEN }}
      ALLURE_ENDPOINT: https://r1995k.testops.cloud/api
      ALLURE_PROJECT_ID: 1
      ALLURE_RESULTS: allure-results
      ALLURE_JOB_RUN_ID: ${{ github.event.inputs.ALLURE_JOB_RUN_ID }}
      
    steps:
      - uses: actions/checkout@v4
      
      - name: Grant Docker socket permissions
        run: sudo chmod 666 /var/run/docker.sock
        
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '11'
          
      - uses: actions/setup-node@v4
        with:
          node-version: lts/*
          
      - uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-npm-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-npm-
            
      - name: Install dependencies
        run: npm ci
        
      - name: Install Playwright Browsers
        run: npx playwright install --with-deps
      
      # Используем более надежный способ установки allurectl
      - name: Install allurectl
        run: |
          curl -OL https://github.com/allure-framework/allurectl/releases/latest/download/allurectl_linux_arm64
          chmod +x allurectl_linux_arm64
          sudo mv allurectl_linux_arm64 /usr/local/bin/allurectl
          allurectl --version
        
      # Добавляем явную проверку параметров allurectl
      - name: Verify allurectl configuration
        run: |
          echo "ALLURE_ENDPOINT: $ALLURE_ENDPOINT"
          echo "ALLURE_PROJECT_ID: $ALLURE_PROJECT_ID"
          echo "Token is set: ${{ secrets.ALLURE_TESTOPS_TOKEN != '' }}"
        
      # Запускаем тесты с опцией --insecure, чтобы избежать проблем с SSL
      - name: Run Playwright tests with allurectl
        run: |
          mkdir -p $ALLURE_RESULTS
          allurectl --insecure watch -- npx playwright test specs/ --reporter=list --reporter=junit --reporter=allure-playwright
        
      - name: Upload Playwright test results
        uses: actions/upload-artifact@v4
        if: always()
        continue-on-error: true
        with:
          name: test-results
          path: test-results/trace/
          retention-days: 30
          
      - name: Upload Allure results
        uses: actions/upload-artifact@v4
        if: always()
        continue-on-error: true
        with:
          name: allure-results
          path: allure-results
          retention-days: 30
      
      # Добавляем запасной вариант отправки результатов, если allurectl failed
      - name: Upload to TestOps with curl (backup)
        if: always()
        continue-on-error: true
        run: |
          if [ -d "allure-results" ] && [ "$(ls -A allure-results)" ]; then
            cd allure-results
            zip -r ../allure-results.zip .
            cd ..
            curl -X POST "$ALLURE_ENDPOINT/upload/project/$ALLURE_PROJECT_ID" \
              -H "Authorization: Bearer $ALLURE_TOKEN" \
              -F "allureResults=@allure-results.zip"
          else
            echo "No allure results found"
          fi
          
      - name: Generate Allure Report
        if: always()
        run: |
          npm install -g allure-commandline@2.x --force
          allure generate allure-results --clean -o allure-report
          
      - name: Send Telegram Notifications
        if: always()
        continue-on-error: true
        run: |
          # Создаем необходимые директории и шаблоны
          mkdir -p notifications/templates
          
          # Создаем commons.ftl
          cat > notifications/templates/commons.ftl << 'EOL'
          <#macro formatTime time><#if time??>${time}</#if></#macro>
          EOL
          
          # Создаем telegram.ftl с импортом commons.ftl
          cat > notifications/templates/telegram.ftl << 'EOL'
          <#import "commons.ftl" as commons>
          {
            "message": "<b>${report.name}</b>\n\n<b>Environment:</b> ${report.environment}\n<b>Comment:</b> ${report.comment}\n<b>Duration:</b> <#if report.time??>${report.time.duration}</#if>\n\n<a href='${report.url}'>Отчет на GitHub Pages</a>",
            "parse_mode": "HTML"
          }
          EOL
          
          # Запускаем отправку уведомлений, используя существующий telegram.json
          java "-DconfigFile=notifications/telegram.json" \
            "-Dbase.reportLink=https://kseniayari.github.io/QA.GURU_diplom/" \
            -jar notifications/allure-notifications-4.9.0.jar
        env:
          TELEGRAM_TOKEN: ${{ secrets.TELEGRAM_TOKEN }}
          TELEGRAM_CHAT: ${{ secrets.TELEGRAM_CHAT }}
          
      - name: Upload Allure HTML report
        uses: actions/upload-artifact@v4
        if: always()
        continue-on-error: true
        with:
          name: allure-report
          path: allure-report
          retention-days: 30
          
      - name: Deploy report to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        if: always()
        continue-on-error: true
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_branch: gh-pages
          publish_dir: ./allure-report
          
      - name: Output TestOps URL
        if: always()
        continue-on-error: true
        run: |
          echo "Allure TestOps project: https://r1995k.testops.cloud/project/1"